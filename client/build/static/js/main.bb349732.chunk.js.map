{"version":3,"sources":["pages/login/login.js","components/header/header.js","components/playersPanel/players-panel.js","components/game-card/game-card.js","pages/scrum-pocker/scrum-pocker.js","App.js","serviceWorker.js","index.js"],"names":["LoginPage","state","userName","localStorage","getItem","this","props","history","push","setItem","e","preventDefault","_this2","react_default","a","createElement","Form","className","onSubmit","Group","controlId","Control","type","placeholder","onChange","setState","target","value","required","Button","block","variant","onClick","startGame","React","Component","Header","handleUserNameChange","_this","as","rows","updateUserName","onBlur","restoreUserName","PlayersPanel","ListGroup","Item","players","map","item","key","GameCard","cardNumber","handleCardClick","Card","bg","isCardSelected","text","onCardClick","index","number","Body","Text","ScrumPocker","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","isAdmin","currentUserStory","userStories","cardsNumbers","selectedCardIndex","userStoryFieldHeight","isRequestingEstimates","onUsernameChange","bind","assertThisInitialized","setUserName","setPlayers","requestEstimates","showEstimates","cardIndex","card","game_card_game_card","event","scrollHeight","_this3","Row","Col","xs","style","height","onUserStoryChange","disabled","playersPanel_players_panel","getCards","header_header","getMainPanel","App","react_router_dom","Container","fluid","react_router","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gZA2CeA,oNArCXC,MAAQ,CACJC,SAAU,yFAINC,aAAaC,QAAQ,mBACrBC,KAAKC,MAAMC,QAAQC,KAAK,mDAItBN,GACFA,IACAC,aAAaM,QAAQ,iBAAkBP,GACvCG,KAAKC,MAAMC,QAAQC,KAAK,mDAGvBE,GACLA,EAAEC,kDAGG,IAAAC,EAAAP,KACL,OACIQ,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMC,UAAU,aAAaC,SAAUb,KAAKa,UACxCL,EAAAC,EAAAC,cAACC,EAAA,EAAKG,MAAN,CAAYC,UAAU,aAClBP,EAAAC,EAAAC,cAACC,EAAA,EAAKK,QAAN,CAAgBC,KAAK,OACLC,YAAY,mBACZC,SAAU,SAAAd,GAAC,OAAIE,EAAKa,SAAS,CAAEvB,SAAUQ,EAAEgB,OAAOC,SAClDC,UAAQ,KAE5Bf,EAAAC,EAAAC,cAACc,EAAA,EAAD,CAAQC,OAAK,EAACC,QAAQ,UAAUT,KAAK,SAASU,QAAS,kBAAMpB,EAAKqB,UAAUrB,EAAKX,MAAMC,YAAvF,uBA/BQgC,IAAMC,oCC2BfC,gMAzBIlC,GACXG,KAAKC,MAAM+B,qBAAqBnC,2CAEpBA,GACPA,GAAUG,KAAKC,MAAM+B,qBAAqBlC,aAAaC,QAAQ,oDAG/D,IAAAkC,EAAAjC,KACL,OACIQ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,UACXJ,EAAAC,EAAAC,cAAA,2BACAF,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACIH,EAAAC,EAAAC,cAACC,EAAA,EAAKG,MAAN,CAAYC,UAAU,gBAClBP,EAAAC,EAAAC,cAACC,EAAA,EAAKK,QAAN,CAAcJ,UAAU,cAAcsB,GAAG,WAAWC,KAAK,IAC7Cb,MAAOtB,KAAKC,MAAMJ,UAAY,GAC9BsB,SAAU,SAAAd,GAAC,OAAI4B,EAAKG,eAAe/B,EAAEgB,OAAOC,QAC5Ce,OAAQ,SAAAhC,GAAC,OAAI4B,EAAKK,gBAAgBjC,EAAEgB,OAAOC,oBAlB1DO,IAAMC,oBCgBZS,0LAbP,OACI/B,EAAAC,EAAAC,cAAA,OAAKE,UAAU,iBACXJ,EAAAC,EAAAC,cAAC8B,EAAA,EAAD,KACIhC,EAAAC,EAAAC,cAAC8B,EAAA,EAAUC,KAAX,KAAiBjC,EAAAC,EAAAC,cAAA,uBAChBV,KAAKC,MAAMyC,QAAQC,IAAI,SAACC,EAAMC,GAAP,OACpBrC,EAAAC,EAAAC,cAAC8B,EAAA,EAAUC,KAAX,CAAgBI,IAAKA,GAAMD,cARxBf,IAAMC,oBC8BlBgB,6LA5BCC,GACR/C,KAAKC,MAAM+C,gBAAgBD,oCAGtB,IAAAd,EAAAjC,KACL,OACIQ,EAAAC,EAAAC,cAACuC,EAAA,EAAD,CAAMC,GAAKlD,KAAKC,MAAMkD,eAAiB,UAAY,GAC7CC,KAAMpD,KAAKC,MAAMkD,eAAiB,QAAS,GAC3CvC,UAAU,sBACVe,QAAS,SAAAtB,GAAC,OAAI4B,EAAKoB,YAAYpB,EAAKhC,MAAMqD,SAC5C9C,EAAAC,EAAAC,cAAA,KAAGE,UAAU,iBAAiBZ,KAAKC,MAAMsD,QACzC/C,EAAAC,EAAAC,cAACuC,EAAA,EAAKO,KAAN,KAEIhD,EAAAC,EAAAC,cAACuC,EAAA,EAAD,CAAMC,GAAIlD,KAAKC,MAAMkD,eAAiB,UAAY,GAAKvC,UAAU,uBAC7DJ,EAAAC,EAAAC,cAACuC,EAAA,EAAKO,KAAN,KACIhD,EAAAC,EAAAC,cAACuC,EAAA,EAAKQ,KAAN,KACKzD,KAAKC,MAAMsD,WAM5B/C,EAAAC,EAAAC,cAAA,KAAGE,UAAU,mBAAmBZ,KAAKC,MAAMsD,gBAxBpC1B,IAAMC,YCkJd4B,qBA5IX,SAAAA,EAAYzD,GAAO,IAAAgC,EAAA,OAAA0B,OAAAC,EAAA,EAAAD,CAAA3D,KAAA0D,IACfzB,EAAA0B,OAAAE,EAAA,EAAAF,CAAA3D,KAAA2D,OAAAG,EAAA,EAAAH,CAAAD,GAAAK,KAAA/D,KAAMC,KAUVL,MAAQ,CACJoE,SAAS,EACTnE,SAAU,KACVoE,iBAAkB,KAClBC,YAAa,GACbxB,QAAS,GACTyB,aAAc,CAAC,IAAK,MAAO,IAAK,IAAK,IAAK,IAAK,IAAK,KAAM,KAAM,KAAM,MACtEC,kBAAmB,GACnBC,qBAAsB,KACtBC,uBAAuB,GAjBvBrC,EAAKsC,iBAAmBtC,EAAKsC,iBAAiBC,KAAtBb,OAAAc,EAAA,EAAAd,CAAA1B,IACxBA,EAAKyC,YAAczC,EAAKyC,YAAYF,KAAjBb,OAAAc,EAAA,EAAAd,CAAA1B,IACnBA,EAAK0C,WAAa1C,EAAK0C,WAAWH,KAAhBb,OAAAc,EAAA,EAAAd,CAAA1B,IAClBA,EAAKoB,YAAcpB,EAAKoB,YAAYmB,KAAjBb,OAAAc,EAAA,EAAAd,CAAA1B,IACnBA,EAAK2C,iBAAmB3C,EAAK2C,iBAAiBJ,KAAtBb,OAAAc,EAAA,EAAAd,CAAA1B,IACxBA,EAAK4C,cAAgB5C,EAAK4C,cAAcL,KAAnBb,OAAAc,EAAA,EAAAd,CAAA1B,IARNA,mFAwBfjC,KAAK0E,cACL1E,KAAK2E,mDAGL,IAAM9E,EAAWC,aAAaC,QAAQ,kBAClCF,EACAG,KAAKoB,SAAS,CAAEvB,aAEhBG,KAAKC,MAAMC,QAAQC,KAAK,0CAK5BH,KAAKoB,SAAS,CAAEsB,QAAS,CAAC,UAAW,mDAExB7C,GACbG,KAAKoB,SAAS,CAAEvB,aACZA,GAAUC,aAAaM,QAAQ,iBAAkBP,uCAE7CiF,GACR,IAAMV,EAAoB,GAC1BA,EAAkBU,IAAa,EAC/B9E,KAAKoB,SAAS,CAAEgD,yDAGT,IAAA7D,EAAAP,KACP,OAAOA,KAAKJ,MAAMuE,aAAaxB,IAAI,SAACoC,EAAMzB,GACtC,OAAO9C,EAAAC,EAAAC,cAACsE,EAAD,CAAUnC,IAAKS,EAClBC,OAAQwB,EACRzB,MAAOA,EACPH,eAAgB5C,EAAKX,MAAMwE,kBAAkBd,GAC7CN,gBAAiBzC,EAAK8C,0DAGhB4B,GACdjF,KAAKoB,SAAS,CAAEiD,qBAAsBY,EAAM5D,OAAO6D,eACnDlF,KAAKoB,SAAS,CAAE6C,iBAAkBgB,EAAM5D,OAAOC,mDAG/CtB,KAAKoB,SAAS,CAACkD,uBAAwBtE,KAAKJ,MAAM0E,gEAGlDtE,KAAKoB,SAAS,CAACkD,uBAAwBtE,KAAKJ,MAAM0E,+DAEvC,IAAAa,EAAAnF,KACX,OAAIA,KAAKJ,MAAMoE,QAEPxD,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAC0E,EAAA,EAAD,KACI5E,EAAAC,EAAAC,cAAC2E,EAAA,EAAD,CAAKC,GAAI,GACL9E,EAAAC,EAAAC,cAAC0E,EAAA,EAAD,KACI5E,EAAAC,EAAAC,cAAC2E,EAAA,EAAD,CAAKzE,UAAU,IACXJ,EAAAC,EAAAC,cAAA,yBACAF,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACIH,EAAAC,EAAAC,cAACC,EAAA,EAAKG,MAAN,CAAYC,UAAU,wBAClBP,EAAAC,EAAAC,cAACC,EAAA,EAAKK,QAAN,CAAcuE,MAAO,CAAEC,OAAQxF,KAAKJ,MAAMyE,sBACtCnC,GAAG,WAAWC,KAAK,IACnBvB,UAAU,cACVM,YAAY,6BACZI,MAAOtB,KAAKJ,MAAMqE,kBAAoB,GACtC9C,SAAU,SAAAd,GAAC,OAAI8E,EAAKM,kBAAkBpF,QAIlDG,EAAAC,EAAAC,cAAC0E,EAAA,EAAD,KACI5E,EAAAC,EAAAC,cAAC2E,EAAA,EAAD,CAAKC,GAAI,GACL9E,EAAAC,EAAAC,cAACc,EAAA,EAAD,CAAQC,OAAK,EAACC,QAAQ,UAAWgE,SAAU1F,KAAKJ,MAAM0E,sBAAuB3C,QAAS3B,KAAK4E,kBAA3F,sBAEJpE,EAAAC,EAAAC,cAAC2E,EAAA,EAAD,CAAKC,GAAI,GACL9E,EAAAC,EAAAC,cAACc,EAAA,EAAD,CAAQC,OAAK,EAACC,QAAQ,UAAUgE,UAAW1F,KAAKJ,MAAM0E,sBAAuB3C,QAAS3B,KAAK6E,eAA3F,uBAMpBrE,EAAAC,EAAAC,cAAC2E,EAAA,EAAD,CAAKC,GAAI,GACL9E,EAAAC,EAAAC,cAACiF,EAAD,CAAcjD,QAAS1C,KAAKJ,MAAM8C,aAM9ClC,EAAAC,EAAAC,cAAC0E,EAAA,EAAD,KACI5E,EAAAC,EAAAC,cAAC2E,EAAA,EAAD,CAAKC,GAAI,GACL9E,EAAAC,EAAAC,cAAC0E,EAAA,EAAD,KACI5E,EAAAC,EAAAC,cAAC2E,EAAA,EAAD,KACI7E,EAAAC,EAAAC,cAAA,yBACAF,EAAAC,EAAAC,cAAA,oCAIRF,EAAAC,EAAAC,cAAC0E,EAAA,EAAD,KACI5E,EAAAC,EAAAC,cAAC2E,EAAA,EAAD,CAAKzE,UAAU,iBACVZ,KAAK4F,cAIlBpF,EAAAC,EAAAC,cAAC2E,EAAA,EAAD,CAAKC,GAAI,GACL9E,EAAAC,EAAAC,cAACiF,EAAD,CAAcjD,QAAS1C,KAAKJ,MAAM8C,6CASlD,OACIlC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACmF,EAAD,CAAQ7D,qBAAsBhC,KAAKuE,iBAAkB1E,SAAUG,KAAKJ,MAAMC,WACzEG,KAAK8F,uBAxIIjE,IAAMC,YCiBjBiE,0LAZX,OACEvF,EAAAC,EAAAC,cAACsF,EAAA,EAAD,KACExF,EAAAC,EAAAC,cAACuF,EAAA,EAAD,CAAWC,OAAK,GACd1F,EAAAC,EAAAC,cAACyF,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAW3G,IACjCa,EAAAC,EAAAC,cAACyF,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,gBAAgBC,UAAW5C,aATrC7B,IAAMC,YCIJyE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOrG,EAAAC,EAAAC,cAACoG,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.bb349732.chunk.js","sourcesContent":["import React from 'react';\nimport { Form, Button } from 'react-bootstrap';\nimport './login.css'\n\nclass LoginPage extends React.Component {\n\n    state = {\n        userName: null\n    }\n\n    componentDidMount() {\n        if (localStorage.getItem('pockerUserName')) {\n            this.props.history.push('/scrum-pocker');\n        }\n    }\n\n    startGame(userName) {\n        if (userName) {\n            localStorage.setItem('pockerUserName', userName);\n            this.props.history.push('/scrum-pocker');\n        }\n    }\n    onSubmit(e) {\n        e.preventDefault();\n    }\n\n    render() {\n        return (\n            <Form className=\"login-form\" onSubmit={this.onSubmit}>\n                <Form.Group controlId=\"fromLogin\">\n                    <Form.Control   type=\"text\" \n                                    placeholder=\"What's your name\" \n                                    onChange={e => this.setState({ userName: e.target.value })}\n                                    required />\n                </Form.Group>\n                <Button block variant=\"primary\" type=\"submit\" onClick={() => this.startGame(this.state.userName)}>\n                    Let's play!\n                </Button>\n            </Form>\n        )\n    }\n}\n\nexport default LoginPage;\n\n","import React from 'react';\nimport { Form } from 'react-bootstrap';\nimport './header.css'\n\nclass Header extends React.Component {\n\n    updateUserName(userName) {\n        this.props.handleUserNameChange(userName);\n    }\n    restoreUserName(userName) {\n        if (!userName) this.props.handleUserNameChange(localStorage.getItem('pockerUserName'));\n    }\n\n    render() {\n        return (\n            <div className=\"header\">\n                <h1>ScrumPockersh</h1>\n                <Form>\n                    <Form.Group controlId=\"formUserName\">\n                        <Form.Control className=\"input-trans\" as=\"textarea\" rows=\"1\" \n                                    value={this.props.userName || ''}\n                                    onChange={e => this.updateUserName(e.target.value)}\n                                    onBlur={e => this.restoreUserName(e.target.value)}\n                                    />\n                    </Form.Group>\n                </Form>\n            </div>\n        )\n    }\n}\n\nexport default Header;\n","import React from 'react';\nimport { ListGroup, Badge } from 'react-bootstrap';\nimport './players-panel.css';\n\nclass PlayersPanel extends React.Component {\n\n    render() {\n        return (\n            <div className=\"players-panel\">\n                <ListGroup>\n                    <ListGroup.Item ><h3>Players:</h3></ListGroup.Item>\n                    {this.props.players.map((item, key) =>\n                        <ListGroup.Item key={key}>{item}</ListGroup.Item>\n                    )}\n                </ListGroup>\n            </div>\n        )\n    }\n}\n\nexport default PlayersPanel;","import React from 'react';\nimport { Card } from 'react-bootstrap';\nimport './game-card.css';\n\nclass GameCard extends React.Component {\n\n    onCardClick(cardNumber) {\n        this.props.handleCardClick(cardNumber);\n    }\n\n    render() {\n        return (\n            <Card bg={ this.props.isCardSelected ? 'primary' : '' } \n                  text={this.props.isCardSelected ? 'white': ''} \n                  className=\"game-card--external\"\n                  onClick={e => this.onCardClick(this.props.index)}>\n                <p className=\"game-card--up\">{this.props.number}</p>\n                <Card.Body>\n                       \n                    <Card bg={this.props.isCardSelected ? 'primary' : '' } className=\"game-card--internal\">\n                        <Card.Body>\n                            <Card.Text>\n                                {this.props.number}\n                            </Card.Text>\n                        </Card.Body>\n                    </Card>\n                       \n                </Card.Body>\n                <p className=\"game-card--down\">{this.props.number}</p>\n            </Card>\n        )\n    }\n}\n\nexport default GameCard;","import React from 'react';\nimport { Row, Col } from 'react-bootstrap';\nimport Header from '../../components/header/header';\nimport PlayersPanel from '../../components/playersPanel/players-panel';\nimport GameCard from '../../components/game-card/game-card';\nimport { Button, Form } from 'react-bootstrap';\nimport './scrum-pocker.css';\n\nclass ScrumPocker extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.onUsernameChange = this.onUsernameChange.bind(this);\n        this.setUserName = this.setUserName.bind(this);\n        this.setPlayers = this.setPlayers.bind(this);\n        this.onCardClick = this.onCardClick.bind(this);\n        this.requestEstimates = this.requestEstimates.bind(this);\n        this.showEstimates = this.showEstimates.bind(this);\n    }\n\n    state = {\n        isAdmin: false,\n        userName: null,\n        currentUserStory: null,\n        userStories: [],\n        players: [],\n        cardsNumbers: ['0', '1/2', '1', '2', '3', '5', '8', '13', '21', '20', '40'],\n        selectedCardIndex: [],\n        userStoryFieldHeight: null,\n        isRequestingEstimates: false\n    }\n\n    componentDidMount() {\n        this.setUserName();\n        this.setPlayers();\n    }\n    setUserName() {\n        const userName = localStorage.getItem('pockerUserName');\n        if (userName) {\n            this.setState({ userName });\n        } else {\n            this.props.history.push('/');\n        }\n    }\n    setPlayers() {\n        // TODO: Get list from node\n        this.setState({ players: ['Charlie', 'Jose'] })\n    }\n    onUsernameChange(userName) {\n        this.setState({ userName });\n        if (userName) localStorage.setItem('pockerUserName', userName);\n    }\n    onCardClick(cardIndex) {\n        const selectedCardIndex = [];\n        selectedCardIndex[cardIndex] = true;\n        this.setState({ selectedCardIndex });\n    }\n\n    getCards() {\n        return this.state.cardsNumbers.map((card, index) => {\n            return <GameCard key={index}\n                number={card}\n                index={index}\n                isCardSelected={this.state.selectedCardIndex[index]}\n                handleCardClick={this.onCardClick} />\n        });\n    }\n    onUserStoryChange(event) {\n        this.setState({ userStoryFieldHeight: event.target.scrollHeight });\n        this.setState({ currentUserStory: event.target.value });\n    }\n    requestEstimates() {\n        this.setState({isRequestingEstimates: !this.state.isRequestingEstimates});\n    }\n    showEstimates() {\n        this.setState({isRequestingEstimates: !this.state.isRequestingEstimates});\n    }\n    getMainPanel() {\n        if (this.state.isAdmin) {\n            return (\n                <div>\n                    <Row>\n                        <Col xs={8}>\n                            <Row>\n                                <Col className=\"\">\n                                    <h3>User Story:</h3>\n                                    <Form>\n                                        <Form.Group controlId=\"formCurrentUserStory\">\n                                            <Form.Control style={{ height: this.state.userStoryFieldHeight }}\n                                                as=\"textarea\" rows=\"3\"\n                                                className=\"input-trans\"\n                                                placeholder=\"Paste here your User Story\"\n                                                value={this.state.currentUserStory || ''}\n                                                onChange={e => this.onUserStoryChange(e)}\n                                            />\n                                        </Form.Group>\n                                    </Form>\n                                    <Row>\n                                        <Col xs={3}>\n                                            <Button block variant=\"primary\"  disabled={this.state.isRequestingEstimates} onClick={this.requestEstimates} >Request Estimates</Button>\n                                        </Col>\n                                        <Col xs={3}>\n                                            <Button block variant=\"primary\" disabled={!this.state.isRequestingEstimates} onClick={this.showEstimates} >Show Estimates</Button>\n                                        </Col>\n                                    </Row>\n                                </Col>\n                            </Row>\n                        </Col>\n                        <Col xs={4}>\n                            <PlayersPanel players={this.state.players} />\n                        </Col>\n                    </Row>\n                </div>)\n        } else {\n            return (\n                <Row>\n                    <Col xs={8}>\n                        <Row>\n                            <Col >\n                                <h3>User Story:</h3>\n                                <p>This is my User Story</p>\n                            </Col>\n                        </Row>\n\n                        <Row>\n                            <Col className=\"cards-section\">\n                                {this.getCards()}\n                            </Col>\n                        </Row>\n                    </Col>\n                    <Col xs={4}>\n                        <PlayersPanel players={this.state.players} />\n                    </Col>\n                </Row>\n            )\n        }\n\n    }\n\n    render() {\n        return (\n            <div>\n                <Header handleUserNameChange={this.onUsernameChange} userName={this.state.userName} />\n                {this.getMainPanel()}\n            </div>\n        )\n    }\n}\n\nexport default ScrumPocker;","import React from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport { Container } from 'react-bootstrap';\nimport LoginPage from './pages/login/login';\nimport ScrumPocker from './pages/scrum-pocker/scrum-pocker';\nimport './App.css';\n\n\nclass App extends React.Component {\n\n\n\n  render() {\n    return (\n      <Router>\n        <Container fluid>\n          <Route exact path=\"/\" component={LoginPage}></Route>\n          <Route exact path=\"/scrum-pocker\" component={ScrumPocker}></Route>\n        </Container>\n      </Router>\n    )\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}