{"version":3,"sources":["pages/login/login.js","components/header/header.js","components/playersPanel/players-panel.js","components/game-card/game-card.js","pages/scrum-pocker/scrum-pocker.js","App.js","serviceWorker.js","index.js"],"names":["LoginPage","state","userName","replace","c","r","Math","random","toString","localStorage","getItem","this","props","history","push","userId","uuidv4","setItem","window","socket","emit","name","id","e","preventDefault","_this2","react_default","a","createElement","Form","className","onSubmit","Group","controlId","Control","type","placeholder","onChange","setState","target","value","required","Button","block","variant","onClick","startGame","React","Component","Header","handleUserNameChange","_this","isAdmin","as","rows","updateUserName","onBlur","restoreUserName","PlayersPanel","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","onDeletePlayer","bind","assertThisInitialized","playerId","fa","color","deletePlayer","_this3","ListGroup","Item","players","map","item","key","score","getAdminControllers","shouldDisplayEstimates","GameCard","index","number","handleCardClick","Card","bg","isCardSelected","text","onCardClick","Body","Text","ScrumPocker","currentUserStory","cardsNumbers","selectedCardIndex","userStoryFieldHeight","isGetPlayersIntervalSet","isClearingEstimates","onUsernameChange","setPlayers","toggleEstimates","getPlayersFromDB","logout","clearEstimates","on","userStory","clearInterval","interval","setInterval","axios","get","then","playersData","console","log","data","JSON","parse","post","cardIndex","arguments","length","undefined","cardNumber","clear","_this4","card","game_card_game_card","event","scrollHeight","_this5","setTimeout","_this6","Row","Col","xs","style","height","onUserStoryChange","playersPanel_players_panel","getCards","header_header","getMainPanel","App","react_router_dom","Container","fluid","react_router","exact","path","component","render","scrum_pocker_scrum_pocker","assign","Boolean","location","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.29b5cf83.chunk.js","sourcesContent":["import React from 'react';\nimport { Form, Button } from 'react-bootstrap';\nimport './login.css';\n\nclass LoginPage extends React.Component {\n\n    state = {\n        userName: null\n    }\n\n    uuidv4() {\n        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n            var r = Math.random() * 16 | 0, v = c === 'x' ? r : (r & 0x3 | 0x8);\n            return v.toString(16);\n        });\n    }\n\n    componentDidMount() {\n        if (localStorage.getItem('pockerUserName')) {\n            this.props.history.push('/scrum-pocker');\n        }\n    }\n\n    startGame(userName) {\n        if (userName) {\n            const userId = this.uuidv4();\n            localStorage.setItem('pockerUserName', userName);\n            localStorage.setItem('pockerUserId', userId);\n            window.socket.emit('add player', {name: userName, id: userId});\n            this.props.history.push('/scrum-pocker');\n        }\n    }\n    onSubmit(e) {\n        e.preventDefault();\n    }\n\n    render() {\n        return (\n            <Form className=\"login-form\" onSubmit={this.onSubmit}>\n                <Form.Group controlId=\"fromLogin\">\n                    <Form.Control type=\"text\"\n                        placeholder=\"What's your name\"\n                        onChange={e => this.setState({ userName: e.target.value })}\n                        required />\n                </Form.Group>\n                <Button block variant=\"primary\" type=\"submit\" onClick={() => this.startGame(this.state.userName)}>\n                    Let's play!\n                </Button>\n            </Form>\n        )\n    }\n}\n\nexport default LoginPage;\n\n","import React from 'react';\nimport { Form } from 'react-bootstrap';\nimport './header.css'\n\nclass Header extends React.Component {\n\n    updateUserName(userName) {\n        this.props.handleUserNameChange(userName);\n    }\n    restoreUserName(userName) {\n        if (!userName) this.props.handleUserNameChange(localStorage.getItem('pockerUserName'));\n    }\n\n    render() {\n        return (\n            <div className=\"header\">\n                <h1>ScrumPockersh</h1>\n                {!this.props.isAdmin ?\n                    <Form>\n                        <Form.Group controlId=\"formUserName\">\n                            <Form.Control className=\"input-trans\" as=\"textarea\" rows=\"1\" \n                                        value={this.props.userName || ''}\n                                        onChange={e => this.updateUserName(e.target.value)}\n                                        onBlur={e => this.restoreUserName(e.target.value)}\n                                        />\n                        </Form.Group>\n                    </Form>\n                    :\n                    null\n                }\n                \n            </div>\n        )\n    }\n}\n\nexport default Header;\n","import React from 'react';\nimport { ListGroup } from 'react-bootstrap';\nimport { FaTrashO } from 'react-icons/lib/fa'\nimport './players-panel.css';\n\nclass PlayersPanel extends React.Component {\n\n    constructor(props) {\n        super(props)\n\n        this.onDeletePlayer = this.onDeletePlayer.bind(this)\n    }\n\n    getAdminControllers(playerId) {\n        return <FaTrashO color=\"red\" onClick={e => this.onDeletePlayer(playerId)}/> \n    }\n    onDeletePlayer(playerId) {\n        this.props.deletePlayer(playerId);\n    }\n\n    render() {\n        return (\n            <div className=\"players-panel\">\n                <ListGroup>\n                    <ListGroup.Item ><h3>Players:</h3></ListGroup.Item>\n                    {this.props.players.map((item, key) =>\n                        <ListGroup.Item key={key} variant={item.score? 'success': ''}>\n                            <span>{this.props.isAdmin ? this.getAdminControllers(item.id) : null} {item.name }</span> \n                            <span>{ this.props.shouldDisplayEstimates ? item.score ? item.score: ':(' : null } </span>\n                        </ListGroup.Item>\n                    )}\n                </ListGroup>\n            </div>\n        )\n    }\n}\n\nexport default PlayersPanel;","import React from 'react';\nimport { Card } from 'react-bootstrap';\nimport './game-card.css';\n\nclass GameCard extends React.Component {\n\n    onCardClick(index, number) {\n        this.props.handleCardClick(index, number);\n    }\n\n    render() {\n        return (\n            <Card bg={ this.props.isCardSelected ? 'primary' : '' } \n                  text={this.props.isCardSelected ? 'white': ''} \n                  className=\"game-card--external\"\n                  onClick={e => this.onCardClick(this.props.index, this.props.number)}>\n                <p className=\"game-card--up\">{this.props.number}</p>\n                <Card.Body>\n                       \n                    <Card bg={this.props.isCardSelected ? 'primary' : '' } className=\"game-card--internal\">\n                        <Card.Body>\n                            <Card.Text>\n                                {this.props.number}\n                            </Card.Text>\n                        </Card.Body>\n                    </Card>\n                       \n                </Card.Body>\n                <p className=\"game-card--down\">{this.props.number}</p>\n            </Card>\n        )\n    }\n}\n\nexport default GameCard;","import React from 'react';\nimport { Row, Col } from 'react-bootstrap';\nimport Header from '../../components/header/header';\nimport PlayersPanel from '../../components/playersPanel/players-panel';\nimport GameCard from '../../components/game-card/game-card';\nimport { Button, ButtonGroup, Form } from 'react-bootstrap';\nimport axios from \"axios\";\nimport './scrum-pocker.css';\n\nclass ScrumPocker extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.onUsernameChange = this.onUsernameChange.bind(this);\n        this.setPlayers = this.setPlayers.bind(this);\n        this.onCardClick = this.onCardClick.bind(this);\n        this.toggleEstimates = this.toggleEstimates.bind(this);\n        this.getPlayersFromDB = this.getPlayersFromDB.bind(this);\n        this.logout = this.logout.bind(this);\n        this.clearEstimates = this.clearEstimates.bind(this);\n    }\n\n    state = {\n        isAdmin: this.props.isAdmin,\n        userName: null,\n        userId: null,\n        currentUserStory: null,\n        players: [],\n        cardsNumbers: ['0', '1/2', '1', '2', '3', '5', '8', '13', '21', '20', '40'],\n        selectedCardIndex: [],\n        userStoryFieldHeight: null,\n        shouldDisplayEstimates: false,\n        isGetPlayersIntervalSet: false,\n        isClearingEstimates: false\n    }\n\n    componentDidMount() {\n        const userName = localStorage.getItem('pockerUserName');\n        const userId = localStorage.getItem('pockerUserId');\n        if (userName || this.state.isAdmin) { // Game starts\n            this.setState({ userName, userId });\n            this.setPlayers();\n            if (!this.state.isAdmin) window.socket.emit('add player', { name: userName, id: userId, score: null });\n            window.socket.on('user story from server', (userStory) => {\n                this.setState({ currentUserStory: userStory })\n            });\n            window.socket.on('clear current estimate', () => {\n                this.onCardClick();\n            });\n        } else {\n            this.props.history.push('/');\n        }\n\n    }\n    componentWillUnmount() {\n        if (this.state.isGetPlayersIntervalSet) {\n            clearInterval(this.state.isGetPlayersIntervalSet);\n            this.setState({ isGetPlayersIntervalSet: null });\n        }\n    }\n    setPlayers() {\n        this.getPlayersFromDB();\n        if (!this.state.isGetPlayersIntervalSet) {\n            let interval = setInterval(this.getPlayersFromDB, 1000);\n            this.setState({ isGetPlayersIntervalSet: interval });\n        }\n    }\n    getPlayersFromDB() {\n        axios.get('/api/get/players')\n            .then(playersData => {\n                console.log(playersData.data.data)\n                this.setState({ players: JSON.parse(playersData.data.data) })\n            });\n    }\n    onUsernameChange(userName) {\n        this.setState({ userName });\n        if (userName) localStorage.setItem('pockerUserName', userName);\n        axios.post('/api/update/player', {\n            id: this.state.userId,\n            name: userName\n        });\n    }\n    onCardClick(cardIndex = null, cardNumber = null) {\n        const selectedCardIndex = [];\n        selectedCardIndex[cardIndex] = true;\n        this.setState({ selectedCardIndex });\n        axios.post('/api/update/player', {\n            id: this.state.userId,\n            name: this.state.userName,\n            score: cardNumber\n        });\n    }\n    logout() {\n        localStorage.clear();\n        this.props.history.push('/');\n    }\n    onDeletePlayer(playerId) {\n        axios.post('/api/delete/player', {\n            id: playerId\n        });\n    }\n    getCards() {\n        return this.state.cardsNumbers.map((card, index) => {\n            return <GameCard key={index}\n                number={card}\n                index={index}\n                isCardSelected={this.state.selectedCardIndex[index]}\n                handleCardClick={this.onCardClick} />\n        });\n    }\n    onUserStoryChange(event) {\n        this.setState({ userStoryFieldHeight: event.target.scrollHeight });\n        this.setState({ currentUserStory: event.target.value });\n        window.socket.emit('send user story', event.target.value);\n    }\n    toggleEstimates() {\n        this.setState({ shouldDisplayEstimates: !this.state.shouldDisplayEstimates });\n    }\n    clearEstimates() {\n        console.log(this.state.isClearingEstimates)\n        if (this.state.isClearingEstimates) {\n            axios.post('/api/delete/estimates', {\n                id: []\n            });\n            this.setState({isClearingEstimates: false})\n            window.socket.emit('clear estimates');\n        } else {\n            this.setState({isClearingEstimates: true});\n            setTimeout( () => {\n                this.setState({isClearingEstimates: false})\n            }, 4000);\n        }\n    }\n    getMainPanel() {\n        if (this.state.isAdmin) {\n            return (\n                <div>\n                    <Row>\n                        <Col xs={8}>\n                            <Row>\n                                <Col className=\"\">\n                                    <h3>User Story:</h3>\n                                    <Form>\n                                        <Form.Group controlId=\"formCurrentUserStory\">\n                                            <Form.Control style={{ height: this.state.userStoryFieldHeight }}\n                                                as=\"textarea\" rows=\"3\"\n                                                className=\"input-trans\"\n                                                placeholder=\"Paste here your User Story\"\n                                                value={this.state.currentUserStory || ''}\n                                                onChange={e => this.onUserStoryChange(e)}\n                                            />\n                                        </Form.Group>\n                                    </Form>\n                                </Col>\n                            </Row>\n                        </Col>\n                        <Col xs={4}>\n                            <Row>\n                                <Col xs={6}>\n                                    {this.state.shouldDisplayEstimates ? \n                                        <Button block variant=\"primary\" onClick={this.toggleEstimates} >Hide Estimates</Button> \n                                        : <Button block variant=\"primary\" onClick={this.toggleEstimates} >Show Estimates</Button>}\n                                    \n                                </Col>\n                                <Col xs={6}>\n                                \n                                    <Button block variant=\"danger\" onClick={this.clearEstimates}>\n                                        {this.state.isClearingEstimates ? 'Are you Sure?' : 'Clear' }</Button>\n                                \n                                </Col>\n                            </Row>\n                            <br />\n                            <PlayersPanel players={this.state.players} isAdmin={this.state.isAdmin} shouldDisplayEstimates={this.state.shouldDisplayEstimates} deletePlayer={this.onDeletePlayer}/>\n                        </Col>\n                    </Row>\n                </div>)\n        } else {\n            return (\n                <Row>\n                    <Col xs={8}>\n                        <Row>\n                            <Col >\n                                <h3>User Story:</h3>\n                                <p>{this.state.currentUserStory || 'No user Story added yet'}</p>\n                            </Col>\n                        </Row>\n\n                        <Row>\n                            <Col>\n                                <Button onClick={this.onCardClick}>Clear</Button>\n                            </Col>\n                        </Row>\n                        <Row>\n                            <Col className=\"cards-section\">\n                                {this.getCards()}\n                            </Col>\n                        </Row>\n                    </Col>\n                    <Col xs={4}>\n                        <PlayersPanel players={this.state.players} />\n                    </Col>\n                </Row>\n            )\n        }\n\n    }\n\n    render() {\n        return (\n            <div>\n                <Header handleUserNameChange={this.onUsernameChange} isAdmin={this.state.isAdmin} userName={this.state.userName}/>\n                {this.getMainPanel()}\n            </div>\n        )\n    }\n}\n\nexport default ScrumPocker;","import React from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport { Container } from 'react-bootstrap';\nimport LoginPage from './pages/login/login';\nimport ScrumPocker from './pages/scrum-pocker/scrum-pocker';\nimport './App.css';\n\n\nclass App extends React.Component {\n\n\n\n  render() {\n    return (\n      <Router>\n        <Container fluid>\n          <Route exact path=\"/\" component={LoginPage}></Route>\n          <Route exact path=\"/scrum-pocker\" component={ScrumPocker}></Route>\n          <Route path='/scrum-pocker/admin' render={(props) => <ScrumPocker {...props} isAdmin={true} />} />          \n        </Container>\n      </Router>\n    )\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}